# this doesn't use odeint. this uses "adaptive stepping" 
# same idea as before, just making results more precise (still not ligo/virgo level)
# more accurate when merger is getting closer
# uses adaptive Runge-Kutta method by Dormand and Prince (check readme)
# uses scipy’s integrate.ode module (method = “dopri5”)
# this is unfamiliar territory, so might contain significant errors

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import ode
from scipy import constants

# define constants 

MSUN_SI = 2e30     #scipy doesnt have 
G_SI = constants.gravitational_constant
C_SI = constants.speed_of_light
#scipy inbuilt: https://docs.scipy.org/doc/scipy/reference/constants.html

# input masses
m1 = m2 = 5*MSUN_SI*G_SI/C_SI**3
m = m1 + m2
mu = m1 * m2 / m

# system of ODEs
def F(v):
    return (32 / 5) * (mu / m)**2 * v**10

def E_prime(v):
    return -mu * v

def system(t, y):
    v, phi = y
    dvdt = -F(v) / E_prime(v)
    dphidt = v**3 / m
    return [dvdt, dphidt]

# initial conditions
v0 = 0.2
phi0 = 0.0
y0 = [v0, phi0]
t0 = 0
t_max = 10
dt = 10

# set up solver
solver = ode(system)
solver.set_integrator('dopri5')
solver.set_initial_value(y0, t0)

# storage
t_vals = []
v_vals = []
phi_vals = []

while solver.successful() and solver.t < t_max:
    solver.integrate(solver.t + dt)
    t_vals.append(solver.t)
    v_vals.append(solver.y[0])
    phi_vals.append(solver.y[1])

# convert to arrays
t_vals = np.array(t_vals)
v_vals = np.array(v_vals)
phi_vals = np.array(phi_vals)

# gravitational waves
h_plus = 4 * (mu / m) * v_vals**2 * np.cos(phi_vals)
h_cross = 4 * (mu / m) * v_vals**2 * np.sin(phi_vals)

# plot
plt.plot(t_vals, h_plus, label="h+ (adaptive)", color='green')
plt.plot(t_vals, h_cross, label="h× (adaptive)", color='red')
plt.title("Part 3: GW Polarizations (DOPRI5)")
plt.xlabel("Time")
plt.ylabel("Strain")
plt.legend()
plt.grid()
plt.show()

